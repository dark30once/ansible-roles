const crypto = require('crypto');
const fs = require('fs');
var credentials =  { 
  '2d009164.ac916e': {
    user: '{{mqtt_local_user}}',
    password: '{{mqtt_local_password}}' },
  'e11fd458.3cf228': {},
  'c1d3de12.60f1a': {
    cadata: '-----BEGIN CERTIFICATE-----\nMIIEFzCCAv+gAwIBAgIJAPGKsyYrIAGjMA0GCSqGSIb3DQEBCwUAMIGgMQswCQYD\nVQQGEwJQSDEYMBYGA1UECAwPTmVncm9zIE9yaWVudGFsMRcwFQYDVQQHDA5EdW1h\nZ3VldGUgQ2l0eTEeMBwGA1UECgwVRm91bmRhdGlvbiBVbml2ZXJzaXR5MREwDwYD\nVQQLDAhOaWdodG93bDErMCkGA1UEAwwic21hcnQtY2xhc3Nyb29tLWNhLmZvdW5k\nYXRpb251LmNvbTAgFw0xOTAxMjEwNDIyMTZaGA8yMTE4MTIyODA0MjIxNlowgaAx\nCzAJBgNVBAYTAlBIMRgwFgYDVQQIDA9OZWdyb3MgT3JpZW50YWwxFzAVBgNVBAcM\nDkR1bWFndWV0ZSBDaXR5MR4wHAYDVQQKDBVGb3VuZGF0aW9uIFVuaXZlcnNpdHkx\nETAPBgNVBAsMCE5pZ2h0b3dsMSswKQYDVQQDDCJzbWFydC1jbGFzc3Jvb20tY2Eu\nZm91bmRhdGlvbnUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA\nzQhGaLuZUKzlQxD9XOC5Tyn26VpI50Pj6/RlDeNK/hordqY8ogewjU1kzC+ESDNn\nHrChbD5sowJvlxqIwl3nFX9rx1tr8TxtM8iT0/GAa29O9CNIxKpxf2oeDg/+96OI\nl/ifKCLtUSw8eToJSM9s5dCKu/Jj0s9ECWDx/Y9C0AoWtb0pFQ/3cJLy5ZRFhUah\n4LG52lz3ynLljXGIK/9DU6vKZIm86h7/k2kAwh5RI2u3nBXQD95ZlHkvjLH10P0h\n/kdcKCfVzIKmdD8gErbQa+gnHyZOeWYAjoVAswN7k1yOJuB/lw2dKKnH1jbVk5Si\neDILD07wj1OkGU+FXPA4JwIDAQABo1AwTjAdBgNVHQ4EFgQUu1gnET6nWKn8xvT5\nyKez1e9e+agwHwYDVR0jBBgwFoAUu1gnET6nWKn8xvT5yKez1e9e+agwDAYDVR0T\nBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAi9BSFVjnBqGxBDAuiduWtL5Yn/AN\ncdrQpHHyyhb3cEEVIpHVG9WOyZyBQTgvIC49mkWLu22jxoXTvPblVXBTPE/iHcII\nyufyLWv8H1XPEqWNs0+xjhjSf8f2wozqnbBJbgFW39AOkeKH7PY/VI+cqVWFNgG3\nM9Qfa1bZJWX6/21I6O0om3t7LhZ7DeLJdO+lEaKPdRKHbnCvl94f0ST4W92hARKe\nXbXNvh83Lfp05kU9LaPsg8hwy1BkfpkjgE6FxXo+rV2OEfJfTICU0nCI+Xh9Me89\nUfMzKuSUlK8h7f02sPP6sy+QsQGeL+bLZE8/wKnr1NoPyLv+yudWHeml9A==\n-----END CERTIFICATE-----\n' },
  'a5253b4d.32c858': {
    user: '{{mqtt_central_user}}',
    password: '{{mqtt_central_password}}' },
  '1b85d03d.d180b': {} }
var userKey = JSON.parse(fs.readFileSync('/srv/nodered/.node-red/.config.json'))['_credentialSecret'];
var encryptionKey = crypto.createHash('sha256').update(userKey).digest();
var initVector = crypto.randomBytes(16);
var cipher = crypto.createCipheriv("aes-256-ctr", encryptionKey, initVector);
var result = cipher.update(JSON.stringify(credentials), 'utf8', 'base64') + cipher.final('base64');
result = initVector.toString('hex') + result;
let data = {'$': result};
fs.writeFileSync('/srv/nodered/.node-red/flows_iot_cred.json', JSON.stringify(data));
