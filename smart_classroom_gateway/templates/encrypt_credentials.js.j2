const crypto = require('crypto');
const fs = require('fs');
var credentials =  { 
  '2d009164.ac916e': {
    user: '{{mqtt_local_user}}',
    password: '{{mqtt_local_password}}' },
  'e11fd458.3cf228': {},
  'c1d3de12.60f1a': {
    cadata: '-----BEGIN CERTIFICATE-----\nMIIEFzCCAv+gAwIBAgIJAJmvNjO+uH01MA0GCSqGSIb3DQEBCwUAMIGgMQswCQYD\nVQQGEwJQSDEYMBYGA1UECAwPTmVncm9zIE9yaWVudGFsMRcwFQYDVQQHDA5EdW1h\nZ3VldGUgQ2l0eTEeMBwGA1UECgwVRm91bmRhdGlvbiBVbml2ZXJzaXR5MREwDwYD\nVQQLDAhOaWdodG93bDErMCkGA1UEAwwic21hcnQtY2xhc3Nyb29tLWNhLmZvdW5k\nYXRpb251LmNvbTAgFw0xOTAxMjMxMTU3MDRaGA8yMTE4MTIzMDExNTcwNFowgaAx\nCzAJBgNVBAYTAlBIMRgwFgYDVQQIDA9OZWdyb3MgT3JpZW50YWwxFzAVBgNVBAcM\nDkR1bWFndWV0ZSBDaXR5MR4wHAYDVQQKDBVGb3VuZGF0aW9uIFVuaXZlcnNpdHkx\nETAPBgNVBAsMCE5pZ2h0b3dsMSswKQYDVQQDDCJzbWFydC1jbGFzc3Jvb20tY2Eu\nZm91bmRhdGlvbnUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA\nxfe05KyhWdW33DX445WeIsg/kVrZOl2TiuHHq/G6/Ujv7x4JkwAY5gNn9yXb4+px\nuFtCD5OpnjotuS7VX9UxmLRVaTzYuKD+7H6JmspjB9YsCyxpg/Bpnqqt1tuAAChd\nefHNKGPZP18MkdJUBBmia4zzZ8Tlh0XsNCjDOzQ0IFNQfnyrMxlV6aTjgMx5AMTC\n21F7H5O0bC8QT6BbVKpQptEJKFizOBkTw/JmRSMhoUQCTDXiWFbAXTQyWFzvkHqj\nPDzpqrR1Zmz33YdTFE9Bp3lJ4tJUqgfsEok9vb5JpJfqGjSxNeEk0JasLHm5EHlx\ns14w+4ZV5SX9evk8sKQ6lQIDAQABo1AwTjAdBgNVHQ4EFgQUOaoPnee96g94Uu4D\nc/3X+ZOGmPAwHwYDVR0jBBgwFoAUOaoPnee96g94Uu4Dc/3X+ZOGmPAwDAYDVR0T\nBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAu3te75N73x4wxohLHX78LWhrn9B6\neUxX4bsV3IBVVT8bnVI5ZYX2sELPypVFksNi1buJFrS59++NZ+Q6/8Xp/OzjyjyT\nZ6/SeGRd1bCMWfJUGRqtDW/SROXSmhrdeQbXazxd85PrexQrrTcC6BLajloN8X8V\nBydPgkrpCWGyx6KH4oAcmCT1pHdHzB7LGyQDPm1LyhFVvypNCx90S/6Lp4SG6YVd\nPJXRBln+OCH1PBlJCzaoXuwxko8qgYw0UAQpd3Ts1KwBuEqB54nEVEsyGKEQpotl\nSrTez6GJryFZyyn2TECkc5w9v0enW4pc8EyXtMxhY+aZOvRDQI6RI0+6ZQ==\n-----END CERTIFICATE-----\n' },
  'a5253b4d.32c858': {
    user: '{{mqtt_central_user}}',
    password: '{{mqtt_central_password}}' },
  '1b85d03d.d180b': {} }
var userKey = JSON.parse(fs.readFileSync('/srv/nodered/.node-red/.config.json'))['_credentialSecret'];
var encryptionKey = crypto.createHash('sha256').update(userKey).digest();
var initVector = crypto.randomBytes(16);
var cipher = crypto.createCipheriv("aes-256-ctr", encryptionKey, initVector);
var result = cipher.update(JSON.stringify(credentials), 'utf8', 'base64') + cipher.final('base64');
result = initVector.toString('hex') + result;
let data = {'$': result};
fs.writeFileSync('/srv/nodered/.node-red/flows_iot_cred.json', JSON.stringify(data));
